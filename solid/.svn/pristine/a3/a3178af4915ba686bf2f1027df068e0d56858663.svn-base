package cn.yufei.ssm.system.interceptor;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;
import java.lang.reflect.Method;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.method.HandlerMethod;

import cn.yufei.ssm.system.annotation.SystemControllerLog;
import cn.yufei.ssm.system.po.SysLog;
import cn.yufei.ssm.system.po.UserContext;
import cn.yufei.ssm.system.service.SysLogService;
import cn.yufei.ssm.system.utils.ResourcesUtil;
import cn.yufei.ssm.system.utils.Tools;

public class LoginInterceptor implements HandlerInterceptor {
	
	@Autowired
	private SysLogService sysLogService;
	private Logger logger = LoggerFactory.getLogger(getClass());

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
			Object handler) throws Exception {
		// 得到请求的url
		String url=request.getRequestURI();
		//判断是否是公开地址
		List<String> list_urls=ResourcesUtil.gekeyList("anonymousURL");
		//遍历公开地址
		for(String open_url:list_urls){
			if(url.indexOf(open_url)>=0){
				//如果是公开地址，放行
				return true;
			}
		}
		//判断用户身份是否在session中
		HttpSession session=request.getSession();
		String context=(String) session.getAttribute("userID");
		if(context!=null){
			return true;
		}
		//执行拦截跳转到登录页面，用户进行身份认证
		request.getRequestDispatcher("/WEB-INF/UI/login.jsp").forward(request, response);
		return false;
	}
	
	/**
     * 该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。
     * 这个方法的主要作用是用于进行资源清理工作的
     * @param request
     * @param response
     * @param handler
     * @param e
     * @throws Exception
     */
	@Override
	public void afterCompletion(HttpServletRequest request,
			HttpServletResponse response, Object handler, Exception e)
			throws Exception {
		
		 try {
			 HttpSession session=request.getSession();
	            HandlerMethod handler2=(HandlerMethod) handler;
	            UserContext context=(UserContext)session.getAttribute("userContext");
	            SystemControllerLog log = handler2.getMethod().getAnnotation(SystemControllerLog.class);
	            if(null !=log){
	                //获取操作系统等信息
	                StringBuffer sb=new StringBuffer();
	                sb.append("操作系统名称:"+System.getProperty("os.name"));//操作系统名称
	                sb.append("操作系统构架"+System.getProperty("os.arch"));//操作系统构架
	                sb.append("操作系统版本"+System.getProperty("os.version"));//操作系统版本
	                SysLog slog=new SysLog();
	                slog.setSdescription(log.operationName());
	                slog.setSfunction(request.getRequestURI());
	                slog.setVersion(new BigDecimal(0));
	                slog.setSip(getIpAddr(request));
	                slog.setSid(Tools.getID());
	                slog.setScreatetime(Calendar.getInstance().getTime());
	                slog.setSuserid(context.getUserId());
	                slog.setSusername(context.getUserName());
	                //如果controller报错，则记录异常错误
	                if(e != null){
	                	slog.setSexception(getStackTraceAsString(e));
	                }else{
	                	slog.setSexception(sb.toString());
	                }
	                try {
	                	sysLogService.addLog(slog);
	                     logger.info("========生成新的日志 ======",slog);
	                }catch (Exception e1){
	                     logger.info("=====生成日志出现异常====== ", e1);
	                }
	            }
	        }catch (Exception el){
	            el.printStackTrace();
	        }

	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response,
			Object handler, ModelAndView modeAndView) throws Exception {

	}
	
	 /**
     * 获取Ip地址
     * @param request
     * @return
     */
    public  String getIpAddr(HttpServletRequest request)  {
        String ip  =  request.getHeader( " x-forwarded-for " );
        if (ip  ==   null   ||  ip.length()  ==   0   ||   " unknown " .equalsIgnoreCase(ip))  {
            ip  =  request.getHeader( " Proxy-Client-IP " );
        }
        if (ip  ==   null   ||  ip.length()  ==   0   ||   " unknown " .equalsIgnoreCase(ip))  {
            ip  =  request.getHeader( " WL-Proxy-Client-IP " );
        }
        if (ip  ==   null   ||  ip.length()  ==   0   ||   " unknown " .equalsIgnoreCase(ip))  {
            ip  =  request.getRemoteAddr();
        }
        return  ip;
    }
    
    /**
     * 将ErrorStack转化为String.
     */
    public static String getStackTraceAsString(Throwable e) {
        if (e == null){
            return "";
        }
        StringWriter stringWriter = new StringWriter();
        e.printStackTrace(new PrintWriter(stringWriter));
        return stringWriter.toString();
    }
    
    
   



}
